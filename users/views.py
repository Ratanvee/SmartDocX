from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
# Create your views here.

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.contrib.auth import get_user_model
# from bson import ObjectId
from .models import CustomUser
from .forms import RegisterForm

# from django.shortcuts import render, get_object_or_404
# from .models import CustomUser, Document
import PyPDF2
from django.shortcuts import render, get_object_or_404
from .models import CustomUser

from django.utils.timezone import now, timedelta
from django.db.models import Sum, Count

# from .models import UploadedFile
# from .forms import FileUploadForm

from django.views.decorators.csrf import csrf_exempt

def custom_404_view(request, exception):
    return render(request, '404.html', status=404)


CustomUser = get_user_model()  # âœ… Get the correct user model
from django.contrib.auth.hashers import make_password

User = get_user_model()  # Get the custom user model

def register(request):
    if request.method == 'POST':
        username = request.POST['username']
        email = request.POST['email']
        password1 = request.POST['password1']
        password2 = request.POST['password2']
        
        if password1 == password2:
            if not User.objects.filter(username=username).exists():
                user = User.objects.create_user(username=username, email=email, password=password1)
                login(request, user)
                request.session['username'] = username
                request.session['password'] = password1  # Storing password is not recommended
                return redirect('dashboard')
            else:
                return render(request, 'users/register.html', {'error': 'Username already exists'})
        else:
            return render(request, 'users/register.html', {'error': 'Passwords do not match'})
    
    return render(request, 'users/register.html')



from django.contrib.auth import login  # Ensure this import is correct


from django.contrib.auth import login, authenticate
from django.shortcuts import render, redirect
from django.contrib import messages

def login_view(request):
    error_message = None  # Initialize error message
    
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect('dashboard')
        else:
            error_message = "Username or password is incorrect."

    return render(request, 'users/login.html', {'error': error_message})


def user_logout(request):
    logout(request)
    return redirect('login')

def home(request):
    return render(request, 'users/home.html')



from users.models import CustomUser

from users.models import PrintOrder  # Adjust based on your app name

def get_orders(unique_url=None):
    """
    Fetches all orders if unique_url is not provided.
    Fetches orders of a particular owner if unique_url is provided.
    """
    if unique_url:
        orders = PrintOrder.objects.filter(unique_url=unique_url)  # Fetch specific user's orders
    else:
        orders = PrintOrder.objects.all()  # Fetch all orders

    return orders

from users.models import PrintOrder

def count_customers_for_owner(owner_unique_url):
    """
    Counts total unique customers who have placed orders for a particular owner.
    """
    customers_count = (
        PrintOrder.objects.filter(unique_url=owner_unique_url, order_id__isnull=False)
        .values("unique_url")
        .distinct()
        .count()
    )
    return customers_count


from users.models import PrintOrder
from django.db.models import Sum

def calculate_total_revenue(owner_unique_url):
    """
    Calculates the total revenue generated by a particular owner.
    """
    total_revenue = (
        PrintOrder.objects.filter(unique_url=owner_unique_url)
        .aggregate(total=Sum("amount"))["total"] or 0
    )
    return total_revenue

def count_total_pages(owner_unique_url):
    """
    Counts the total number of pages printed for a particular owner.
    """
    total_pages = (
        PrintOrder.objects.filter(unique_url=owner_unique_url)
        .aggregate(total=Sum("total_pages"))["total"] or 0
    )
    return total_pages


from users.models import PrintOrder
from django.utils.timezone import now
from django.db.models import Count

# def count_orders_by_period(owner_unique_url):
#     """
#     Count total orders for a particular owner by day, week, month, year, and all time.
#     """
#     today = now().date()
#     start_of_week = today - timedelta(days=today.weekday())  # Monday of current week
#     start_of_month = today.replace(day=1)  # First day of the month
#     start_of_year = today.replace(month=1, day=1)  # First day of the year

#     orders = PrintOrder.objects.filter(unique_url=owner_unique_url)

#     counts = {
#         "today": orders.filter(order_time__date=today).count(),
#         "this_week": orders.filter(order_time__date__gte=start_of_week).count(),
#         "this_month": orders.filter(order_time__date__gte=start_of_month).count(),
#         "this_year": orders.filter(order_time__date__gte=start_of_year).count(),
#         "all_time": orders.count(),
#     }
    
#     return counts

# def calculate_revenue_by_period(owner_unique_url):
#     """
#     Calculate total revenue for a particular owner by day, week, month, year, and all time.
#     """
#     today = now().date()
#     start_of_week = today - timedelta(days=today.weekday())  # Monday of current week
#     start_of_month = today.replace(day=1)  # First day of the month
#     start_of_year = today.replace(month=1, day=1)  # First day of the year

#     orders = PrintOrder.objects.filter(unique_url=owner_unique_url)

#     revenue = {
#         "today": orders.filter(order_time__date=today).aggregate(total=Sum("amount"))["total"] or 0,
#         "this_week": orders.filter(order_time__date__gte=start_of_week).aggregate(total=Sum("amount"))["total"] or 0,
#         "this_month": orders.filter(order_time__date__gte=start_of_month).aggregate(total=Sum("amount"))["total"] or 0,
#         "this_year": orders.filter(order_time__date__gte=start_of_year).aggregate(total=Sum("amount"))["total"] or 0,
#         "all_time": orders.aggregate(total=Sum("amount"))["total"] or 0,
#     }

#     return revenue


from django.db.models import Sum
from django.utils.timezone import now
from datetime import timedelta

def count_orders_by_period(owner_unique_url):
    today = now().date()
    start_of_week = today - timedelta(days=today.weekday())
    start_of_month = today.replace(day=1)
    start_of_year = today.replace(month=1, day=1)

    orders = PrintOrder.objects.filter(unique_url=owner_unique_url)

    time_slots = [("12 AM", 0, 6), ("6 AM", 6, 12), ("12 PM", 12, 18), ("6 PM", 18, 24)]
    day_orders = [orders.filter(order_time__hour__gte=start, order_time__hour__lt=end).count() for _, start, end in time_slots]
    week_orders = [orders.filter(order_time__date=start_of_week + timedelta(days=i)).count() for i in range(7)]
    month_orders = [orders.filter(order_time__date__gte=start_of_month + timedelta(days=7 * i),
                                  order_time__date__lt=start_of_month + timedelta(days=7 * (i + 1))).count() for i in range(4)]
    year_orders = [orders.filter(order_time__month=i).count() for i in range(1, 13)]
    all_time_years = list(orders.dates("order_time", "year"))
    all_time_orders = [orders.filter(order_time__year=year.year).count() for year in all_time_years]

    return {
        "day": {"labels": [slot[0] for slot in time_slots], "orders": day_orders},
        "week": {"labels": ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], "orders": week_orders},
        "month": {"labels": ["Week 1", "Week 2", "Week 3", "Week 4"], "orders": month_orders},
        "year": {"labels": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], "orders": year_orders},
        "allTime": {"labels": [str(year.year) for year in all_time_years], "orders": all_time_orders},
    }

def calculate_revenue_by_period(owner_unique_url):
    today = now().date()
    start_of_week = today - timedelta(days=today.weekday())
    start_of_month = today.replace(day=1)
    start_of_year = today.replace(month=1, day=1)

    orders = PrintOrder.objects.filter(unique_url=owner_unique_url)

    time_slots = [("12 AM", 0, 6), ("6 AM", 6, 12), ("12 PM", 12, 18), ("6 PM", 18, 24)]
    
    def get_revenue(queryset):
        return float(queryset.aggregate(total=Sum("amount"))["total"] or 0)  # Convert Decimal to float

    day_revenue = [get_revenue(orders.filter(order_time__hour__gte=start, order_time__hour__lt=end)) for _, start, end in time_slots]
    week_revenue = [get_revenue(orders.filter(order_time__date=start_of_week + timedelta(days=i))) for i in range(7)]
    month_revenue = [get_revenue(orders.filter(order_time__date__gte=start_of_month + timedelta(days=7 * i),
                                               order_time__date__lt=start_of_month + timedelta(days=7 * (i + 1)))) for i in range(4)]
    year_revenue = [get_revenue(orders.filter(order_time__month=i)) for i in range(1, 13)]
    all_time_years = list(orders.dates("order_time", "year"))
    all_time_revenue = [get_revenue(orders.filter(order_time__year=year.year)) for year in all_time_years]

    return {
        "day": {"labels": [slot[0] for slot in time_slots], "revenue": day_revenue},
        "week": {"labels": ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], "revenue": week_revenue},
        "month": {"labels": ["Week 1", "Week 2", "Week 3", "Week 4"], "revenue": month_revenue},
        "year": {"labels": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], "revenue": year_revenue},
        "allTime": {"labels": [str(year.year) for year in all_time_years], "revenue": all_time_revenue},
    }

def get_orders_and_revenue_by_period(owner_unique_url):
    orders_data = count_orders_by_period(owner_unique_url)
    revenue_data = calculate_revenue_by_period(owner_unique_url)

    final_data = {}
    for period in ["day", "week", "month", "year", "allTime"]:
        final_data[period] = {
            "labels": orders_data[period]["labels"],
            "orders": orders_data[period]["orders"],
            "revenue": revenue_data[period]["revenue"]
        }

    return final_data


import os
from users.models import PrintOrder
from django.utils.timezone import localtime

def get_owner_orders_table(owner_unique_url):
    """
    Retrieve all orders of a particular owner in table format.
    Only shows the file name instead of the full file path.
    """
    orders = PrintOrder.objects.filter(unique_url=owner_unique_url).values(
        "order_id", "transaction_id", "order_time", "amount", "document"
    )

    # Convert query to list of dictionaries
    order_table = [
        {
            "Order ID": order["order_id"],  # Database Order ID
            "Transaction ID": order["transaction_id"],
            "Date Time": localtime(order["order_time"]).strftime("%Y-%m-%d %H:%M:%S"),
            "Price (â‚¹)": order["amount"],
            "File Name": os.path.basename(order["document"])  # Extracts only file name
        }
        for order in orders
    ]

    return order_table

import json
    


from datetime import datetime
import pytz

ist = pytz.timezone('Asia/Kolkata')



@login_required
def dashboard(request):
    user = request.user  # Get the logged-in user

    if not CustomUser.objects.filter(username=user.username).exists():
        return render(request, "error.html", {"message": "User does not exist."})

    # Fetch orders using unique_url instead of user
    orders = PrintOrder.objects.filter(unique_url=user.unique_url)  
    owner_unique_url = user.unique_url  # Get the unique_url of the owner
    # print('orders:', orders)
    # print('unique url:', user.unique_url)
    # Fetch all orders
    # all_orders = get_orders()

   
    # unique_url = "ratan-555b8a9d"  # Replace with actual owner unique_url

    # Check if there are any orders
    orders = PrintOrder.objects.filter(unique_url=owner_unique_url)
    # print("Orders Found:", orders.exists())  # Should return True if orders exist
    # print("Total Orders:", orders.count())  # Should return the correct count

    # Debugging: Print all orders
    # for order in orders:
    #     print(order.id, order.unique_url, order.amount, order.order_time)
    # owner_unique_url = "ratan-555b8a9d"  # Replace with the actual unique_url of the owner
    total_customers = count_customers_for_owner(owner_unique_url)
    # print(f"Total Customers for Owner {owner_unique_url}: {total_customers}")
    total_revenue = calculate_total_revenue(owner_unique_url)
    # print(f"Total Revenue for Owner {owner_unique_url}: â‚¹{total_revenue}")
    total_pages = count_total_pages(owner_unique_url)
    # print(f"Total Pages Printed for Owner {owner_unique_url}: {total_pages}")


    order_counts = count_orders_by_period(owner_unique_url)

    # print("Order Counts:")
    # for period, count in order_counts.items():
    #     print(f"{period}: {count}")


    # revenue_counts = calculate_revenue_by_period(owner_unique_url)

    # print("Revenue Counts:")
    # for period, total in revenue_counts.items():
    #     print(f"{period}: â‚¹{total}")
    # # print('all_orders:', all_orders)
    
    # orders_table = get_owner_orders_table(owner_unique_url)
    # print("Orders Table:", orders_table)



    orders = PrintOrder.objects.filter(unique_url=owner_unique_url).values(
        "order_id", "transaction_id", "order_time", "amount", "document"
    )
    order_table = [
        {
            "order_id": order["order_id"] if order["order_id"] else "N/A",
            "transaction_id": order["transaction_id"],
            "order_time": datetime.fromtimestamp(order["order_time"].timestamp(), ist).strftime("%Y-%m-%d %I:%M:%S %p"),  # 12-hour format with AM/PM
            "price": str(order["amount"]),
            "file_name": os.path.basename(order["document"]) if order["document"] else "N/A",
            "file_url": f"/media/{order['document']}" if order["document"] else "#",  # File URL
        }
        for order in orders
    ]
    orders_and_revenue = {
    "today": {
        "labels": ["8 AM", "10 AM", "12 PM", "2 PM"],
        "current": {"revenue": [100, 200, 150, 300], "orders": [5, 10, 8, 15]},
        "previous": {"revenue": [80, 150, 120, 250], "orders": [3, 7, 6, 12]}
    },
    "week": {
        "labels": ["Mon", "Tue", "Wed", "Thu"],
        "current": {"revenue": [500, 600, 550, 700], "orders": [25, 30, 28, 35]},
        "previous": {"revenue": [400, 550, 500, 650], "orders": [20, 27, 25, 30]}
    },
    "month": {
        "labels": ["Week 1", "Week 2", "Week 3", "Week 4"],
        "current": {"revenue": [2000, 2400, 2300, 2800], "orders": [100, 120, 110, 130]},
        "previous": {"revenue": [1800, 2200, 2100, 2600], "orders": [90, 110, 100, 120]}
    },
    "year": {
        "labels": ["Jan", "Feb", "Mar", "Apr"],
        "current": {"revenue": [8000, 8500, 8700, 9000], "orders": [400, 420, 430, 450]},
        "previous": {"revenue": [7500, 8000, 8200, 8500], "orders": [380, 400, 410, 430]}
    },
    "all_time": {
        "labels": ["2019", "2020", "2021", "2022", "2023"],
        "current": {"revenue": [50000, 55000, 60000, 65000, 70000], "orders": [2500, 2700, 3000, 3200, 3500]},
        "previous": {"revenue": [45000, 50000, 55000, 60000, 65000], "orders": [2300, 2500, 2800, 3000, 3300]}
    }
}


    # print("Order Table:", order_table)
    # Print table format
    # print("Orders Table:")
    # print("Order ID | Transaction ID | Date Time | Price (â‚¹) | File Name")
    # print("-" * 80)
    # for order in orders_table:
    #     print(f"{order['Order ID']} | {order['Transaction ID']} | {order['Date Time']} | â‚¹{order['Price (â‚¹)']} | {order['File Name']}")



    # orders_and_revenue = get_orders_and_revenue_by_period(owner_unique_url)
    # print("Orders and Revenue by Period:", orders_and_revenue)
    # orders_and_revenue.to_json("orders_and_revenue.json", orient="records")
    # json_data = json.dumps(orders_and_revenue)
    # print(json_data)  # Output as a JSON string

    if request.method == "POST":
        form_type = request.POST.get("form_type")  # Identify which settings form was submitted
        
        if form_type == "general":
            shop_name = request.POST.get("shopname")
            shop_email = request.POST.get("shopemail")
            shop_phone = request.POST.get("shopphone")
            shop_address = request.POST.get("shopaddress")
            shop_currency = request.POST.get("shopcurrency")
            print('form_type:', form_type)
            print('shop_name:', shop_name)
            print('shop_email:', shop_email)

            # Save data (You can save it in a model)
            messages.success(request, "General settings updated successfully!")

        elif form_type == "profile":
            shop_name = request.POST.get("shopname")
            shop_email = request.POST.get("shopemail")
            shop_phone = request.POST.get("shopphone")
            shop_address = request.POST.get("shopaddress")
            shop_currency = request.POST.get("shopcurrency")
            print('form_type:', form_type)
            print('shop_name:', shop_name)
            print('shop_email:', shop_email)

            # Save data (You can save it in a model)
            messages.success(request, "Profile settings updated successfully!")

        elif form_type == "security":
            shop_name = request.POST.get("shopname")
            shop_email = request.POST.get("shopemail")
            shop_phone = request.POST.get("shopphone")
            shop_address = request.POST.get("shopaddress")
            shop_currency = request.POST.get("shopcurrency")

            # Save data (You can save it in a model)
            messages.success(request, "Security settings updated successfully!")

        elif form_type == "Notifications":
            shop_name = request.POST.get("shopname")
            shop_email = request.POST.get("shopemail")
            shop_phone = request.POST.get("shopphone")
            shop_address = request.POST.get("shopaddress")
            shop_currency = request.POST.get("shopcurrency")

            # Save data (You can save it in a model)
            messages.success(request, "Notifications settings updated successfully!")


        elif form_type == "billing":
            shop_name = request.POST.get("shopname")
            shop_email = request.POST.get("shopemail")
            shop_phone = request.POST.get("shopphone")
            shop_address = request.POST.get("shopaddress")
            shop_currency = request.POST.get("shopcurrency")

            # Save data (You can save it in a model)
            messages.success(request, "Billing settings updated successfully!")

        return redirect("dashboard")  # Redirect back to the dashboard

    # return render(request, "dashboard.html")  # Render the dashboard template
    return render(request, "users/dashboard.html", {
        "user": user,
        "orders": orders,
        "unique_url": user.unique_url,
        "orders_and_revenue": orders_and_revenue,
        "total_orders": orders.count(),
        "total_customers": total_customers,
        "total_revenue": total_revenue,
        "total_pages": total_pages,
        "order_table": order_table
    })





import os
import subprocess
from django.http import JsonResponse
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import get_object_or_404
from .models import PrintOrder  # Import your model

import subprocess
import os
import time

def get_pdf_page_count(file_path):
    """Get the number of pages in a PDF file using Ghostscript."""
    gs_command = [
        "C:\\Program Files\\gs\\gs10.04.0\\bin\\gswin64c.exe",
        "-q", "-dNODISPLAY", "-c",
        f"({file_path}) (r) file runpdfbegin pdfpagecount = quit"
    ]
    
    try:
        result = subprocess.run(gs_command, capture_output=True, text=True)
        return int(result.stdout.strip()) if result.returncode == 0 else None
    except Exception:
        return None

# def print_pdf(file_path, printer_name="", color_mode="color", duplex="single"):
#     """Print a PDF with custom settings using Ghostscript on Windows"""

#     gs_command = [
#         "C:\\Program Files\\gs\\gs10.04.0\\bin\\gswin64c.exe",  # Update path if needed
#         "-dNOPAUSE", "-dBATCH", "-sDEVICE=mswinpr2",
#         f"-sOutputFile=%printer%{printer_name}" if printer_name else "-sOutputFile=%printer%",
#         file_path
#     ]

#     # Set Black & White mode
#     if color_mode == "bw":
#         gs_command.insert(-1, "-sColorConversionStrategy=Gray")
#         gs_command.insert(-1, "-dProcessColorModel=/DeviceGray")

#     # Set Duplex mode
#     if duplex == "double":
#         gs_command.insert(-1, "-dDuplex=true")
#     elif duplex == "single":
#         gs_command.insert(-1, "-dDuplex=false")

#     # Run the command
#     subprocess.run(gs_command, shell=True)
import os
import win32print
import win32api

# Get Django settings
from django.conf import settings

def print_pdf(file_path, printer_name="Canon LBP2900"):
    # Convert the relative path to an absolute path
    absolute_path = os.path.join(settings.MEDIA_ROOT, file_path.lstrip("/"))

    if not os.path.exists(absolute_path):
        print(f"Error: File '{absolute_path}' not found!")
        return

    # Send the file to the printer
    win32api.ShellExecute(0, "print", f'"{absolute_path}"', None, ".", 0)

# Example Usage:
# print_pdf('/user_uploads/ratan-ef18ed52/Acknowledgement.pdf')


import os
# import win32print
# import win32api




import subprocess
# import win32print

import subprocess
import win32print


def list_printers():
    """Lists all available printers."""
    printers = [printer[2] for printer in win32print.EnumPrinters(2)]
    return printers

import subprocess

import subprocess

def print_with_ghostscript1(file_path, printer_name="Canon LBP2900"):
    """Prints a PDF using Ghostscript on Canon LBP2900."""
    ghostscript_path = r"C:\Program Files\gs\gs10.01.0\bin\gswin64c.exe"  # Update if needed
    print("Ghostscript Path:", ghostscript_path)
    print("File Path Ghost :", file_path)

    command = [
        ghostscript_path,
        "-sDEVICE=mswinpr2",
        f"-sOutputFile=%printer%{printer_name}",
        "-dNOPAUSE",
        "-dBATCH",
        file_path,
    ]

    try:
        subprocess.run(command, check=True)
        print(f"Printing {file_path} on {printer_name}.")
    except subprocess.CalledProcessError as e:
        print(f"Error printing document: {e}")

# Example Usage
# file_path = r"C:\Users\Ratan\Documents\test.pdf"  # Update with the correct file path
# print_with_ghostscript(file_path)

# Example Usage
# file_path = r"C:\Users\Ratan\Documents\test.pdf"
# print_with_ghostscript(file_path)


def print_with_ghostscript(file_path):
    """Prints a PDF using Ghostscript, allowing the user to select a printer."""

    # List all available printers
    printers = list_printers()
    if not printers:
        print("No printers found!")
        return

    print("Available Printers:")
    for i, p in enumerate(printers, 1):
        print(f"{i}. {p}")
    choice = int(input("Select a printer (Enter the number): ")) - 1
    printer_name = printers[choice]

    print(f"Selected Printer: {printer_name}")
    print("Printing File:", file_path)

    # âœ… Fix the Ghostscript path issue by wrapping it in quotes
    ghostscript_path = r'"C:\Program Files\gs\gs10.04.0\bin\gswin64c.exe"'  # Wrapped in double quotes

    command = [
        ghostscript_path,
        "-sDEVICE=mswinpr2",
        f"-sOutputFile=%printer%{printer_name}",
        "-dNOPAUSE",
        "-dBATCH",
        f'"{file_path}"',  # Wrap file path in quotes too
    ]

    try:
        subprocess.run(" ".join(command), shell=True, check=True)  # Join command as a string
        print(f"Printing {file_path} on {printer_name}.")
    except subprocess.CalledProcessError as e:
        print(f"Error printing document: {e}")




# def print_documents(file_path, printer_name="Canon LBP2900"):
#     """
#     Print a document based on its file type.
#     Supported formats: PDF, Word (.docx), Image, Text
#     """
#     print("This is file Path of print documents function  : ", file_path)
#     ghostscript_path = r"C:\\Program Files\\gs\\gs10.01.0\\bin\\gswin64c.exe"  # Update if needed
#     # ghostscript_path = "C:\\Program Files\\gs\\gs10.04.0\\bin\\gswin64c.exe"

#     command = [
#         ghostscript_path,
#         "-sDEVICE=mswinpr2",
#         f"-sOutputFile=%printer%{printer_name}",
#         "-dNOPAUSE",
#         "-dBATCH",
#         file_path,
#     ]

#     try:
#         subprocess.run(command, check=True)
#         print(f"Printing {file_path} on {printer_name}.")
#     except subprocess.CalledProcessError as e:
#         print(f"Error printing document: {e}")
# Example Usage
# file_path = "C:\\Users\\ratan\\OneDrive\\Desktop\\PrintEase\\SmartDocX\\media\\user_uploads\\ratan-ef18ed52\\Acknowledgement.pdf"
# print_documents(file_path)








# Example usage
# print_pdf("C:\\path\\to\\your\\file.pdf")




from django.http import JsonResponse
import subprocess
import time

# def print_document(request):
#     if request.method == "POST":
#         # file_path = request.POST.get("file_path")
#         # file_path = request.POST("file_path")
#         # print("This is file path : ", file_path)
#         data = json.loads(request.body)  # Read JSON data
#         file_path = data.get("file_path", "")

#         print("Received File Path:", file_path)  # Debugging
#         file_path = file_path.replace("/", "\\")
#         print("Formatted File Path:", file_path)  # Debugging

#         if not file_path:
#             return JsonResponse({"error": "File path is missing!"}, status=400)

#         try:
#             start_time = time.time()

#             # Call print function
#             # print_pdf(file_path)
#             file_path = "C:\\Users\\ratan\\OneDrive\\Desktop\\PrintEase\\SmartDocX" + file_path
#             print("This is file path 2: ", file_path)
#             # print_documents(file_path)
#             print_with_ghostscript(file_path)


#             end_time = time.time()
#             estimated_time = round(end_time - start_time, 2)

#             return JsonResponse({"message": "Print request sent successfully!", "estimated_time": estimated_time})

#         except Exception as e:
#             return JsonResponse({"error": "This is error : "+ str(e)}, status=500)

#     return JsonResponse({"error": "Invalid request method"}, status=405)

import json
import os
import subprocess
import time
import win32print

from django.http import JsonResponse


def print_document(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)  # Read JSON data
            file_path = data.get("file_path", "")

            if not file_path:
                return JsonResponse({"error": "File path is missing!"}, status=400)

            # âœ… Construct the correct absolute file path
            file_path = "C:\\Users\\ratan\\OneDrive\\Desktop\\PrintEase\\SmartDocX" + file_path
            file_path = file_path.replace("/", "\\")  # Fix path slashes for Windows

            print("Final Absolute File Path:", file_path)

            # âœ… Ensure file exists
            if not os.path.exists(file_path):
                return JsonResponse({"error": f"File '{file_path}' not found!"}, status=404)

            start_time = time.time()

            # Call print function
            # print_with_ghostscript(file_path)
            print("Printing file ..................................")
            # print_with_ghostscript1(file_path)

            end_time = time.time()
            estimated_time = round(end_time - start_time, 2)

            return JsonResponse({"message": "Print request sent successfully!", "estimated_time": estimated_time})

        except Exception as e:
            return JsonResponse({"error": f"An error occurred: {str(e)}"}, status=500)

    return JsonResponse({"error": "Invalid request method"}, status=405)


from django.shortcuts import render, redirect
from django.http import JsonResponse
from .models import PrintOrder, UploadedDocument
from .forms import UploadFileForm, PrintOrderForm

# @csrf_exempt
# def upload_document(request, unique_url):
#     """
#     Allows customers to upload a document with print customizations.
#     The document is automatically linked to a specific shop owner.
#     """

#     user = CustomUser.objects.filter(unique_url=unique_url).first()

#     print("This is slug URL : ", unique_url)

#     if request.method == "POST":
#         file_objects = []
#         for file in request.FILES.getlist('files'):  # Get multiple uploaded files
#             file_instance = UploadedDocument(file=file)
#             print('file:', file)
#             file_instance.save()
#             file_objects.append(file_instance)

#         order_form = PrintOrderForm(request.POST)
#         if order_form.is_valid():
#             print('order_form:', order_form)
#             print('transaction id :', order_form.transaction_id)
#             order = order_form.save()
#             order.files.set(file_objects)  # Attach files to the order
#             return JsonResponse({"status": "success", "order_id": order.id})
#         else:
#             return JsonResponse({"status": "error", "errors": order_form.errors})
        

#     print("doing nothing ")
#     # return render(request, 'customer/upload_document.html')
#     return render(request, 'users/upload.html', {'user': user, 'unique_url': unique_url, "key": settings.RAZORPAY_KEY_ID})


from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse
from django.conf import settings
from .models import CustomUser
from .forms import PrintOrderForm  # âœ… Import the form

# from .forms import DocumentForm

def calculate_price(document):
    """Calculate price based on document properties."""
    # Implement your pricing logic here
    return 10  # Example fixed price



from PyPDF2 import PdfReader

def count_pdf_pages(pdf_path):
    """Returns the number of pages in a PDF file."""
    with open(pdf_path, "rb") as f:
        pdf = PdfReader(f)
        return len(pdf.pages)





from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
import json
from .models import CustomUser, PrintOrder

from datetime import datetime
import pytz

# Define Indian Standard Time (IST) timezone
ist = pytz.timezone('Asia/Kolkata')


from django.utils import timezone




@csrf_exempt
def upload_document(request, unique_url):
    """
    Allows customers to upload a document with print customizations.
    The document is automatically linked to a specific shop owner.
    """
    user = CustomUser.objects.filter(unique_url=unique_url).first()
    print("This is slug URL:", unique_url)

    if request.method == "POST":
        try:
            user = CustomUser.objects.filter(unique_url=unique_url).first()
            if not user:
                return JsonResponse({"status": "error", "message": "Invalid unique URL"}, status=400)

            print("Received request:", request.POST)

            
            # Get current time in IST
            # current_time_ist = datetime.now(ist).strftime('%Y-%m-%d %H:%M:%S')

            # # Store the time in a variable
            # order_time = current_time_ist

            # print("Current Time in India (IST):", order_time)
            # Convert UTC to IST
            # Get current UTC time
            utc_now = timezone.now()

            # Convert to IST
            ist = pytz.timezone("Asia/Kolkata")
            order_time = utc_now.astimezone(ist)  # âœ… Ensure order_time is defined
            print("Current Time in India (IST):", order_time)

            # âœ… Use request.POST for form fields (not request.body)
            data = request.POST.dict()
            file = request.FILES.get("files")  # Get uploaded file
            print("Received Data:", data)
            print("File:", file)
            # total_pages = count_pdf_pages(file)
            # âœ… Handle file upload correctly
            # uploaded_file = request.FILES.get("file")
            uploaded_file = request.FILES.get("file")
            # âœ… Save the uploaded file
            order_id = data.get("order_id")
            print("Order ID:", order_id)


            if uploaded_file:
                file_path = f"user_uploads/{unique_url}/{uploaded_file.name}"
                print("This is file path 1: ", file_path)

            saved_path = default_storage.save(file_path, ContentFile(uploaded_file.read()))
            print("Saved file path 1 1:", saved_path)  
            

            # Check if the uploaded file is a PDF
            if uploaded_file.name.endswith(".pdf"):
                pdf_reader = PdfReader(default_storage.open(file_path))
                num_pages = len(pdf_reader.pages)
                print("Total number of pages of PDF file : ", num_pages)
            else:
                num_pages = None  # Handle non-PDF files separately



            if not uploaded_file:
                return JsonResponse({"status": "error", "message": "No file uploaded"}, status=400)

            

            
           # âœ… Now use it in PrintOrder creation
            order = PrintOrder.objects.create(
                unique_url=unique_url,
                amount=data.get("amount"),
                page_size=data.get("pageSize"),
                paper_type=data.get("paperType"),
                print_color=data.get("printColor"),
                print_sides=data.get("printSides"),
                binding=data.get("binding"),
                copies=data.get("copies"),
                transaction_id=data.get("transaction_id"),
                total_pages=num_pages,
                document=saved_path,  # Store file path in the database
                order_id=order_id,
                order_time=order_time  # âœ… Make sure this is defined
            )

            return JsonResponse({"status": "success", "order_id": order.id, "file_path": saved_path})

        except Exception as e:
            print("Error:", str(e))  # Log error for debugging
            return JsonResponse({"status": "error", "message": "Internal Server Error", "details": str(e)}, status=500)

    return render(request, 'customer/upload_document.html', {'user': user, 'unique_url': unique_url, "key": settings.RAZORPAY_KEY_ID})


# def upload_document(request, unique_url):
#     """
#     Allows customers to upload a document with print customizations.
#     The document is automatically linked to a specific shop owner.
#     """
#     # user = get_object_or_404(CustomUser, unique_url=unique_url)
#     user = CustomUser.objects.filter(unique_url=unique_url).first()

#     # if not user:
#     #     raise Http404("User not found")
    
#     print("This is slug URL : ", unique_url)
#     if request.method == 'POST':
#         form = DocumentForm(request.POST, request.FILES)
#         if form.is_valid():
#             document = form.save(commit=False)
#             document.user = user
#             document.price = calculate_price(document)  # Calculate price
#             document.save()
#             return render(request, 'users/upload_success.html', {'user': user, 'price': document.price})

#     else:
#         form = DocumentForm()

#     return render(request, 'users/upload.html', {'form': form, 'user': user, 'unique_url': unique_url, "key": settings.RAZORPAY_KEY_ID})






from django.shortcuts import render, redirect
from django.http import JsonResponse
from .models import PrintOrder

def save_print_order(request):
    if request.method == "POST":
        file = request.FILES.get("file")
        paper_size = request.POST.get("paperSize")
        paper_type = request.POST.get("paperType")
        print_color = request.POST.get("printColor")
        print_sides = request.POST.get("printSides")
        binding = request.POST.get("binding")
        copies = request.POST.get("copies")
        amount = request.POST.get("amount")
        print('file:', file)
        print('paper_size:', paper_size)    
        print('paper_type:', paper_type)
        print('print_color:', print_color)
        print('print_sides:', print_sides)
        print('binding:', binding)
        print('copies:', copies)
        print('amount:', amount)
        # Save to database
        order = PrintOrder.objects.create(
            file=file,
            paper_size=paper_size,
            paper_type=paper_type,
            print_color=print_color,
            print_sides=print_sides,
            binding=binding,
            copies=copies
        )

        return JsonResponse({"success": True, "message": "Order saved!", "order_id": order.id})
    return JsonResponse({"success": False, "message": "Invalid request"}, status=400)







import razorpay
from django.conf import settings
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import Payment



# Razorpay client setup
razorpay_client = razorpay.Client(auth=(settings.RAZORPAY_KEY_ID, settings.RAZORPAY_KEY_SECRET))


import json 
def verify_payment(request):
    if request.method == "POST":
        data = json.loads(request.body)

        payment_id = data.get("razorpay_payment_id")
        order_id = data.get("razorpay_order_id")
        signature = data.get("razorpay_signature")

        try:
            # Verify signature
            razorpay_client.utility.verify_payment_signature({
                "razorpay_order_id": order_id,
                "razorpay_payment_id": payment_id,
                "razorpay_signature": signature
            })

            # Save transaction in database
            payment = Payment.objects.create(
                order_id=order_id,
                payment_id=payment_id,
                signature=signature,
                amount=int(data.get("amount", 0)),
                status="Success"
            )

            return JsonResponse({
                "status": "success",
                "message": "Payment verified",
                "payment_id": payment.payment_id,
                "order_id": payment.order_id,
                "amount": payment.amount / 100,  # Convert paise to rupees
                "currency": payment.currency
            })
        except razorpay.errors.SignatureVerificationError:
            return JsonResponse({"status": "failed", "message": "Payment verification failed"}, status=400)
        

from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def create_payment(request):
    if request.method == "POST":
        amount = int(request.POST.get("amount")) * 100  # Convert to paise
        payment_order = razorpay_client.order.create({
            "amount": amount,
            "currency": "INR",
            "payment_capture": 1
        })
        return JsonResponse(payment_order)
    

import random

def exitstingshops(request):
    addresses = [
        "Malout GT Road",
        "Muktsar GT Road",
        "Bathinda Main Market",
        "Ferozepur Bus Stand",
        "Ludhiana Mall Road",
        "Patiala Railway Station",
        "Amritsar Golden Temple Road",
        "Jalandhar City Center",
        "Chandigarh Sector 17",
        "Mohali Industrial Area"
    ]

    pricing_options = [
        "â‚¹5 per page (B/W), â‚¹10 per page (Color)",
        "â‚¹4 per page (B/W), â‚¹8 per page (Color)",
        "â‚¹6 per page (B/W), â‚¹12 per page (Color)",
        "â‚¹3 per page (B/W), â‚¹7 per page (Color)",
        "â‚¹5 per page (B/W), â‚¹9 per page (Color)"
    ]
    
    shops = CustomUser.objects.all()

    shop_data = []
    for shop in shops:
        random_address = random.choice(addresses)  # Assigning different addresses
        random_pricing = random.choice(pricing_options)  # Assigning different pricing
        shop_data.append({
            'shopID': shop.unique_url,
            'owner_name': shop.username,
            'address': random_address,  
            'pricing': random_pricing,  
            'upload_link': f"/upload/{shop.unique_url}/",  
        })
    
    print("This is shops data : ", shop_data)
    
    return render(request, 'users/exitstingshops.html', {'shops': shop_data})









# from django.shortcuts import render

# def custom_404(request, exception):
#     return render(request, '404.html', status=404)

from django.shortcuts import render

def custom_404_view(request, exception):
    return render(request, '404.html', status=404)